import os
import pickle
from collections import Counter
import numpy


def 删除目录下所有文件(目录地址):
    所有文件地址 = os.listdir(目录地址)
    if 目录地址[-1] != '/':
        目录地址 += '/'
    for 文件地址 in 所有文件地址:
        os.remove(目录地址 + 文件地址)


def 提取作者及其论文(文件夹地址):
    作者_论文表 = {}
    作者平均_最多_最少论文数 = [0, 0, 1000000]
    所有文件地址 = os.listdir(文件夹地址)
    for 一个文件名 in 所有文件地址:
        with open(文件夹地址 + '/' + 一个文件名, 'r', encoding='utf-8') as r:
            论文向量 = []
            for line in r:
                line = line.strip('\r\n ').split('\t')
                if len(line) < 2:
                    continue
                论文向量.append(line[0])
        if len(论文向量) > 0:
            作者平均_最多_最少论文数[0] += len(论文向量)
            if len(论文向量) > 作者平均_最多_最少论文数[1]:
                作者平均_最多_最少论文数[1] = len(论文向量)
            if len(论文向量) < 作者平均_最多_最少论文数[2]:
                作者平均_最多_最少论文数[2] = len(论文向量)
            作者名 = '.'.join(一个文件名.split('.')[:-1])
            作者_论文表[作者名] = 论文向量
        else:
            print('存在非作者文件！')
            raise 1
    作者平均_最多_最少论文数[0] /= len(作者_论文表)
    print('作者平均_最多_最少论文数:%f,%d,%d; 作者总数:%d' %
          (作者平均_最多_最少论文数[0], 作者平均_最多_最少论文数[1], 作者平均_最多_最少论文数[2], len(作者_论文表)))
    return 作者_论文表


class 专家model:
    def __init__(self, 论文_方向_年份_作者_引用论文_被引论文广义表, 论文编号_英文题目摘要地址):
        self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d = {}
        self.论文_方向_年份_作者_引用论文_被引论文广义表 = 论文_方向_年份_作者_引用论文_被引论文广义表
        self.论文编号_英文题目摘要地址 = 论文编号_英文题目摘要地址
        self.论文编号_文本8长度表d = {}
        self.作者编号_领域8论文表d = {}

    def 筛选专家论文(self, 论文年份范围l, 论文领域白名单s, 论文长度范围l, 删除父类=False):
        删除论文数量 = 0
        #
        with open(self.论文编号_英文题目摘要地址, 'r', encoding='utf-8') as 读取:
            for 一行 in 读取:
                一行 = 一行.strip().split('\t')
                if len(一行) < 3 or 一行[1] == 'None' or 一行[2] == 'None':
                    continue
                if 一行[0] not in self.论文_方向_年份_作者_引用论文_被引论文广义表:
                    continue
                论文编号 = 一行[0]
                论文文本 = 一行[1] + '\t' + 一行[2]
                论文文本长度 = len(论文文本.split())
                论文领域 = [i for i in self.论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][0].keys()]
                if len(self.论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][1]) > 0:
                    论文年份 = int([i for i in self.论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][1].keys()][0])
                else:
                    论文年份 = 0
                self.论文编号_文本8长度表d[论文编号] = [论文文本, 论文文本长度]

                if 删除父类 and len(论文领域) > 0:
                    assert len(论文领域[0]) == 4, 'ASJC分类位数不等于4!'
                    _论文领域 = []
                    for 领域 in 论文领域:
                        if '00#' not in 领域 + '#':
                            _论文领域.append(领域)
                    论文领域 = _论文领域
                if 论文年份范围l != None and (论文年份 < 论文年份范围l[0] or 论文年份 > 论文年份范围l[1]):
                    删除论文数量 += 1
                    continue
                if 论文领域白名单s != None and (len(论文领域白名单s & set(论文领域)) == 0):
                    删除论文数量 += 1
                    continue
                if 论文长度范围l != None and (论文文本长度 < 论文长度范围l[0] or 论文文本长度 > 论文长度范围l[1]):
                    删除论文数量 += 1
                    continue

                论文作者d = self.论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][2]
                for 作者编号 in 论文作者d.keys():
                    if 作者编号 in self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d:
                        self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[作者编号][论文编号] = [论文文本, 论文领域, 论文文本长度, 论文年份]
                    else:
                        self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[作者编号] = {论文编号: [论文文本, 论文领域, 论文文本长度, 论文年份]}
        return 删除论文数量, len(self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d)

    def 按论文数量筛选专家(self, 最少论文数, 最多论文数):
        作者编号_作者论文信息广义表d = {}
        作者编号向量l = [i for i in self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d.keys()]
        删除作者数量 = 0
        for 作者编号 in 作者编号向量l:
            作者论文数 = len(self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[作者编号])
            if 作者论文数 < 最少论文数 or 作者论文数 > 最多论文数:
                删除作者数量 += 1
            else:
                作者编号_作者论文信息广义表d[作者编号] = self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[作者编号]
        self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d = 作者编号_作者论文信息广义表d
        剩余作者数量 = len(作者编号向量l) - 删除作者数量
        return 删除作者数量, 剩余作者数量

    def 整合专家领域(self):
        专家编号_领域d = {}
        for 作者编号, 作者论文信息d in self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d.items():
            领域_论文数表d = {}
            for 论文信息d in 作者论文信息d.values():
                论文领域向量l = 论文信息d[1]
                for 领域 in 论文领域向量l:
                    if 领域 in 领域_论文数表d:
                        领域_论文数表d[领域] += 1
                    else:
                        领域_论文数表d[领域] = 1
            专家编号_领域d[作者编号] = 领域_论文数表d
        self.作者编号_领域8论文表d = 专家编号_领域d
        return 专家编号_领域d

    def 筛选有出色领域的专家(self, 出色领域论文数下限):
        if len(self.作者编号_领域8论文表d) == 0:
            self.整合专家领域()
        作者编号_作者论文信息广义表d = {}
        作者编号_领域8论文表d = {}
        删除作者数量 = 0
        for 作者编号, 论文文本_论文领域_论文文本长度_论文年份广义表d in self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d.items():
            领域_论文数d = self.作者编号_领域8论文表d[作者编号]
            没有出色领域的专家 = True
            for 领域, 论文数 in 领域_论文数d.items():
                if 论文数 >= 出色领域论文数下限:
                    作者编号_作者论文信息广义表d[作者编号] = 论文文本_论文领域_论文文本长度_论文年份广义表d
                    作者编号_领域8论文表d[作者编号] = 领域_论文数d
                    没有出色领域的专家 = False
                    break
            if 没有出色领域的专家:
                删除作者数量 += 1

        self.作者编号_领域8论文表d = 作者编号_领域8论文表d
        self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d = 作者编号_作者论文信息广义表d
        剩余作者数量 = len(作者编号_作者论文信息广义表d)
        return 删除作者数量, 剩余作者数量

    def 输出作者领域(self, 输出地址):
        标题头 = '专家编号\t论文数\t领域数\t领域总出现次数\t领域:出现次数'
        with open(输出地址, 'w', encoding='utf-8') as w:
            if 标题头 != None and len(标题头) > 0:
                w.write(标题头 + '\r\n')
            for 专家编号, 领域_出现次数表d in self.作者编号_领域8论文表d.items():
                领域_出现次数表d_排序 = sorted(领域_出现次数表d.items(), key=lambda t: t[1], reverse=True)
                论文数 = len(self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[专家编号])
                领域数 = len(领域_出现次数表d)
                领域出现次数 = 0
                for v in 领域_出现次数表d.values():
                    领域出现次数 += v
                w.write(专家编号 + '\t' + str(论文数) + '\t' + str(领域数) + '\t' + str(领域出现次数) + '\t')
                w.write('\t'.join(['%s:%d' % (领域, 出现次数) for 领域, 出现次数 in 领域_出现次数表d_排序]))
                w.write('\r\n')

    def 选择专家_随机选择(self, 选择专家数量):
        作者编号向量l = [i for i in self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d.keys()]
        if not 0 < 选择专家数量 < len(作者编号向量l):
            选择专家数量 = len(作者编号向量l)
        已选作者编号向量l = numpy.random.choice(作者编号向量l, 选择专家数量, replace=False)
        作者编号_作者信息广义表d = {}
        for 作者编号 in 已选作者编号向量l:
            作者编号_作者信息广义表d[作者编号] = self.作者编号_论文编号_论文文本_论文领域_论文文本长度_论文年份广义表d[作者编号]
        return 作者编号_作者信息广义表d

    def 选择专家_按优势领域占比(self, 选择专家数量):
        pass


class 生成筛选作者:

    def _输出一位作者的论文(self, 输出目录, 作者编号, 作者论文信息d):
        每篇论文分割 = '{fenge}'
        with open(输出目录 + '/' + 作者编号 + '.txt', 'w', encoding='utf-8') as w:
            for 论文编号, 论文信息d in 作者论文信息d.items():
                论文文本 = 论文信息d[0]
                w.write(每篇论文分割 + '\r\n')
                w.write(论文编号 + '\t' + 论文文本 + '\r\n')

    def _统计专家领域分布情况(self, 专家编号_领域d, 输出统计结果=True):
        平均_最多_最少专家领域个数 = [0, 0, 1000000]
        平均_最多_最少领域拥有专家数 = [0, 0, 1000000]
        平均_最多_最少优势领域拥有专家数 = [0, 0, 1000000]

        for 领域_论文次数表d in 专家编号_领域d.values():
            平均_最多_最少专家领域个数[0] += len(领域_论文次数表d)
            if len(领域_论文次数表d) > 平均_最多_最少专家领域个数[1]:
                平均_最多_最少专家领域个数[1] = len(领域_论文次数表d)
            if len(领域_论文次数表d) < 平均_最多_最少专家领域个数[2]:
                平均_最多_最少专家领域个数[2] = len(领域_论文次数表d)
        平均_最多_最少专家领域个数[0] /= len(专家编号_领域d)

        领域_优势性8专家个数广义表d = {}
        for 专家编号, 领域_论文次数表d in 专家编号_领域d.items():
            领域_论文次数表d_排序l = sorted(领域_论文次数表d.items(), key=lambda t: (t[1]), reverse=True)
            优势领域 = 领域_论文次数表d_排序l[0][0]
            if 优势领域 not in 领域_优势性8专家个数广义表d:
                领域_优势性8专家个数广义表d[优势领域] = [True, 0]
            else:
                领域_优势性8专家个数广义表d[优势领域][1] = True
            for 领域, 论文次数 in 领域_论文次数表d_排序l:
                if 领域 in 领域_优势性8专家个数广义表d:
                    领域_优势性8专家个数广义表d[领域][1] += 1
                else:
                    领域_优势性8专家个数广义表d[领域] = [False, 1]
        优势性专家个数 = 0
        for 优势性8专家个数 in 领域_优势性8专家个数广义表d.values():
            优势性 = 优势性8专家个数[0]
            专家个数 = 优势性8专家个数[1]
            if 优势性:
                优势性专家个数 += 1
                平均_最多_最少优势领域拥有专家数[0] += 专家个数
                if 专家个数 > 平均_最多_最少优势领域拥有专家数[1]:
                    平均_最多_最少优势领域拥有专家数[1] = 专家个数
                if 专家个数 < 平均_最多_最少优势领域拥有专家数[2]:
                    平均_最多_最少优势领域拥有专家数[2] = 专家个数
            平均_最多_最少领域拥有专家数[0] += 专家个数
            if 专家个数 > 平均_最多_最少领域拥有专家数[1]:
                平均_最多_最少领域拥有专家数[1] = 专家个数
            if 专家个数 < 平均_最多_最少领域拥有专家数[2]:
                平均_最多_最少领域拥有专家数[2] = 专家个数
        平均_最多_最少优势领域拥有专家数[0] /= 优势性专家个数
        平均_最多_最少领域拥有专家数[0] /= len(领域_优势性8专家个数广义表d)
        if 输出统计结果:
            print('平均_最多_最少专家拥有领域个数:%s, 平均_最多_最少领域拥有专家数:%s, 平均_最多_最少优势领域拥有专家数:%s (优势领域指专家最重要的领域)' %
                  (str(平均_最多_最少专家领域个数), str(平均_最多_最少领域拥有专家数), str(平均_最多_最少优势领域拥有专家数)))
        return 平均_最多_最少专家领域个数, 平均_最多_最少领域拥有专家数, 平均_最多_最少优势领域拥有专家数

    def _输出作者号与论文号对应表(self, 作者编号_作者信息广义表d, 论文号_作者号广义表输出地址, 作者号_论文号广义表输出地址):
        作者号_论文号广义表d = {}
        论文号_作者号广义表d = {}
        for 作者编号, 作者论文信息d in 作者编号_作者信息广义表d.items():
            作者号_论文号广义表d[作者编号] = {}
            for 论文编号 in 作者论文信息d.keys():
                if 论文编号 not in 作者号_论文号广义表d:
                    作者号_论文号广义表d[作者编号][论文编号] = None
                if 论文编号 in 论文号_作者号广义表d:
                    论文号_作者号广义表d[论文编号][作者编号] = None
                else:
                    论文号_作者号广义表d[论文编号] = {作者编号: None}
        with open(论文号_作者号广义表输出地址, 'w', encoding='utf-8') as w:
            for 论文编号, 作者编号向量d in 论文号_作者号广义表d.items():
                w.write(论文编号 + '\t')
                w.write('\t'.join([i for i in 作者编号向量d.keys()]))
                w.write('\r\n')
        with open(作者号_论文号广义表输出地址, 'w', encoding='utf-8') as w:
            for 作者编号, 论文编号向量d in 作者号_论文号广义表d.items():
                w.write(作者编号 + '\t')
                w.write('\t'.join([i for i in 论文编号向量d.keys()]))
                w.write('\r\n')


class 随机生成筛选作者(生成筛选作者):
    def __init__(self, c专家model: 专家model):
        self.c专家model = c专家model

    def 随机筛选并输出专家论文(self, 论文年份范围l, 论文领域白名单s, 论文长度范围l,
                    最少论文数, 最多论文数, 选择专家数量, 专家论文输出文件夹路径, 删除原所有作者文件,
                    论文号_作者号广义表输出地址, 作者号_论文号广义表输出地址, 出色领域论文数下限=10, 删除父类=True):
        删除论文数量, 作者数 = self.c专家model.筛选专家论文(论文年份范围l, 论文领域白名单s, 论文长度范围l, 删除父类)
        print('第一阶段删除论文数量:%d, 第一阶段剩余作者数量:%d' % (删除论文数量, 作者数))
        删除作者数量, 剩余作者数量 = self.c专家model.按论文数量筛选专家(最少论文数, 最多论文数)
        print('第二阶段删除作者数量:%d, 第二阶段剩余作者数量:%d' % (删除作者数量, 剩余作者数量))
        删除作者数量2, 剩余作者数量2 = self.c专家model.筛选有出色领域的专家(出色领域论文数下限)
        作者编号_作者信息广义表d = self.c专家model.选择专家_随机选择(选择专家数量)
        print('第3阶段删除作者数量:%d, 第3阶段剩余作者数量:%d, 共获取专家%d位' % (删除作者数量2, 剩余作者数量2, len(作者编号_作者信息广义表d)))
        专家编号_领域d = self.c专家model.作者编号_领域8论文表d
        self._统计专家领域分布情况(专家编号_领域d, True)
        作者_论文表 = {}
        for 作者编号, 作者信息d in 作者编号_作者信息广义表d.items():
            作者_论文表[作者编号] = [i for i in 作者信息d.keys()]
        if 删除原所有作者文件:
            删除目录下所有文件(专家论文输出文件夹路径)
        for 作者编号, 作者信息d in 作者编号_作者信息广义表d.items():
            self._输出一位作者的论文(专家论文输出文件夹路径, 作者编号, 作者信息d)
        self._输出作者号与论文号对应表(作者编号_作者信息广义表d,
                           论文号_作者号广义表输出地址=论文号_作者号广义表输出地址, 作者号_论文号广义表输出地址=作者号_论文号广义表输出地址)
        return 作者_论文表


def 获取论文_方向_年份_作者_引用论文_被引论文广义表(论文_方向_年份_作者_引用论文_被引论文广义表地址):
    with open(论文_方向_年份_作者_引用论文_被引论文广义表地址, 'rb') as r:
        论文_方向_年份_作者_引用论文_被引论文广义表 = pickle.load(
            r)
    return 论文_方向_年份_作者_引用论文_被引论文广义表


def 获取专家引用论文(作者_论文表, 论文_方向_年份_作者_引用论文_被引论文广义表):
    引用论文_专家表 = {}
    引用论文的专家最多_最少_平均数 = [0, 1000000, 0]
    引用论文_年份表d = {}
    for 专家, 论文列表 in 作者_论文表.items():
        for 论文 in 论文列表:
            for 引用论文 in 论文_方向_年份_作者_引用论文_被引论文广义表[论文][3].keys():
                if 引用论文 in 引用论文_专家表:
                    引用论文_专家表[引用论文][专家] = None
                else:
                    引用论文_专家表[引用论文] = {专家: None}
                引用论文_年份表d[引用论文] = 论文_方向_年份_作者_引用论文_被引论文广义表[引用论文][1]
                if len(引用论文_年份表d[引用论文]) > 0:
                    引用论文_年份表d[引用论文] = int([i for i in 引用论文_年份表d[引用论文].keys()][0])
                else:
                    引用论文_年份表d[引用论文] = 0
    # 统计
    for 引用论文, 专家向量d in 引用论文_专家表.items():
        if 引用论文的专家最多_最少_平均数[0] < len(专家向量d):
            引用论文的专家最多_最少_平均数[0] = len(专家向量d)
        if 引用论文的专家最多_最少_平均数[1] > len(专家向量d):
            引用论文的专家最多_最少_平均数[1] = len(专家向量d)
        引用论文的专家最多_最少_平均数[2] += len(专家向量d)
    引用论文的专家最多_最少_平均数[2] /= len(引用论文_专家表)

    print('引用论文总数:%d; 引用论文的专家最多_最少_平均数:%d,%d,%f' %
          (len(引用论文_专家表), 引用论文的专家最多_最少_平均数[0], 引用论文的专家最多_最少_平均数[1], 引用论文的专家最多_最少_平均数[2]))
    return 引用论文_专家表, 引用论文_年份表d


def 获得作者论文的年份(论文_方向_年份_作者_引用论文_被引论文广义表):
    作者_论文8年份广义表d = {}
    for 专家, 论文列表 in 作者_论文表.items():
        作者_论文8年份广义表d[专家] = []
        for 论文 in 论文列表:
            年份 = [i for i in 论文_方向_年份_作者_引用论文_被引论文广义表[论文][1].keys()]
            if len(年份) > 0:
                作者_论文8年份广义表d[专家].append([论文, int(年份[0])])
            else:
                作者_论文8年份广义表d[专家].append([论文, 0])
    return 作者_论文8年份广义表d


def 统计作者领域(作者_论文表, 论文_方向_年份_作者_引用论文_被引论文广义表, 领域比例下限=0.1):
    作者_领域广义表d = {}
    最优领域_涉及作者广义表d = {}
    领域_涉及作者8排名8出现次数广义表d = {}
    领域_涉及作者8比例广义表d = {}
    for 作者, 论文向量l in 作者_论文表.items():
        作者_领域广义表d[作者] = {}
        for 论文 in 论文向量l:
            论文领域向量d = 论文_方向_年份_作者_引用论文_被引论文广义表[论文][0]
            for 论文领域 in 论文领域向量d.keys():
                if 论文领域 in 作者_领域广义表d[作者]:
                    作者_领域广义表d[作者][论文领域] += 1
                else:
                    作者_领域广义表d[作者][论文领域] = 1
    for 作者, 领域_出现次数表d in 作者_领域广义表d.items():
        if len(领域_出现次数表d) == 0:
            continue
        领域_出现次数排序l = sorted(领域_出现次数表d.items(), key=lambda t: t[1], reverse=True)
        作者领域总出现次数 = 0
        for 排名 in range(len(领域_出现次数排序l)):
            领域 = 领域_出现次数排序l[排名][0]
            出现次数 = 领域_出现次数排序l[排名][1]
            作者领域总出现次数 += 出现次数
            if 领域 in 领域_涉及作者8排名8出现次数广义表d:
                领域_涉及作者8排名8出现次数广义表d[领域].append([作者, 排名, 出现次数])
            else:
                领域_涉及作者8排名8出现次数广义表d[领域] = [[作者, 排名, 出现次数]]
        for 领域, 出现次数 in 领域_出现次数排序l:
            比例 = 出现次数 / 作者领域总出现次数
            if 领域 in 领域_涉及作者8比例广义表d:
                领域_涉及作者8比例广义表d[领域].append([作者, 比例])
            else:
                领域_涉及作者8比例广义表d[领域] = [[作者, 比例]]
    for 领域, 涉及作者_比例表l in 领域_涉及作者8比例广义表d.items():
        涉及作者_比例表l_排序 = sorted(涉及作者_比例表l, key=lambda t: t[1], reverse=True)
        for 作者, 比例 in 涉及作者_比例表l_排序:
            if 比例 < 领域比例下限:
                break
            if 领域 in 最优领域_涉及作者广义表d:
                最优领域_涉及作者广义表d[领域].append(作者)
            else:
                最优领域_涉及作者广义表d[领域] = [作者]

    最优领域最多_最少_平均作者数l = [0, 1000000, 0]
    for 最优领域, 涉及作者向量l in 最优领域_涉及作者广义表d.items():
        if len(涉及作者向量l) > 最优领域最多_最少_平均作者数l[0]:
            最优领域最多_最少_平均作者数l[0] = len(涉及作者向量l)
        if len(涉及作者向量l) < 最优领域最多_最少_平均作者数l[1]:
            最优领域最多_最少_平均作者数l[1] = len(涉及作者向量l)
        最优领域最多_最少_平均作者数l[2] += len(涉及作者向量l)
    最优领域最多_最少_平均作者数l[2] /= len(最优领域_涉及作者广义表d)
    print('最优领域个数:%d, 最优领域最多作者数:%d, 最优领域最少作者数:%d, 最优领域平均作者数:%f' %
          (len(最优领域_涉及作者广义表d), 最优领域最多_最少_平均作者数l[0], 最优领域最多_最少_平均作者数l[1], 最优领域最多_最少_平均作者数l[2]))
    return 作者_领域广义表d, 最优领域_涉及作者广义表d, 领域_涉及作者8排名8出现次数广义表d, 领域_涉及作者8比例广义表d


class 重构标准答案:
    @staticmethod
    def 用专家引用论文(引用论文_专家表, 引用论文_年份表d, 最少专家数, 最多专家数, 答案论文单词数下限, 标准答案数目上限, 论文编号_英文题目摘要地址):
        引用论文_文本_单词数表d = {}
        with open(论文编号_英文题目摘要地址, 'r', encoding='utf-8') as 读取:
            for 一行 in 读取:
                一行 = 一行.strip().split('\t')
                if len(一行) < 3 or 一行[1] == 'None' or 一行[2] == 'None':
                    continue
                else:
                    if 一行[0] not in 引用论文_专家表:
                        continue
                    论文单词数 = len(一行[1].split(' ')) + len(一行[2].split(' '))
                    引用论文_文本_单词数表d[一行[0]] = [一行[1] + ' ' + 一行[2], 论文单词数]
        引用论文_文本_选择专家_年份表d = {}
        满足限制条件的引用论文总数 = 0
        for 引用论文, 专家向量d in 引用论文_专家表.items():
            if len(专家向量d) >= 最少专家数 and len(专家向量d) <= 最多专家数 and \
                    int(引用论文_年份表d[引用论文]) > 0 and \
                    引用论文 in 引用论文_文本_单词数表d and \
                    引用论文_文本_单词数表d[引用论文][1] >= 答案论文单词数下限:
                if len(引用论文_文本_选择专家_年份表d) < 标准答案数目上限:
                    引用论文_文本_选择专家_年份表d[引用论文] = [引用论文_文本_单词数表d[引用论文][0], 专家向量d, 引用论文_年份表d[引用论文]]
                满足限制条件的引用论文总数 += 1
        print('被选择的论文数量:%d, 满足限制条件的引用论文总数%d' %
              (len(引用论文_文本_选择专家_年份表d), 满足限制条件的引用论文总数))
        return 引用论文_文本_选择专家_年份表d

    @staticmethod
    def 用相同领域论文(作者_论文表d, 最优领域_涉及作者广义表d, 论文_方向_年份_作者_引用论文_被引论文广义表,
                最少专家数, 最多专家数, 答案论文单词数下限, 标准答案数目上限, 论文编号_英文题目摘要地址):
        稿件编号_文本_选择专家_年份表d = {}
        所有作者集合s = set([i for i in 作者_论文表d.keys()])

        选择稿件的领域向量l = []
        for 最优领域, 涉及作者向量l in 最优领域_涉及作者广义表d.items():
            if len(涉及作者向量l) >= 最少专家数:
                选择稿件的领域向量l.append(最优领域)
                最优领域_涉及作者广义表d[最优领域] = 最优领域_涉及作者广义表d[最优领域][:最多专家数]
        if len(选择稿件的领域向量l) == 0:
            print('没有合适的稿件领域!')
            raise 1
        while True:
            if len(选择稿件的领域向量l) < 标准答案数目上限:
                选择稿件的领域向量l += 选择稿件的领域向量l
            else:
                break
        选择稿件的领域向量l = 选择稿件的领域向量l[:标准答案数目上限]
        选择稿件的领域_出现次数表d = dict(Counter(选择稿件的领域向量l))
        满足条件的论文数目 = 0
        with open(论文编号_英文题目摘要地址, 'r', encoding='utf-8') as 读取:
            for 一行 in 读取:
                一行 = 一行.strip().split('\t')
                if len(一行) < 3 or 一行[1] == 'None' or 一行[2] == 'None':
                    continue
                else:
                    文本 = 一行[1] + ' ' + 一行[2]
                    论文编号 = 一行[0]
                    论文单词数 = len(文本.split())
                    论文领域向量l = [i for i in 论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][0].keys()]
                    论文作者向量l = [i for i in 论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][2].keys()]
                    论文年份 = 论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][1]
                    if len(论文年份) > 0:
                        论文年份 = int([i for i in 论文年份.keys()][0])
                    else:
                        论文年份 = 0
                    if 论文单词数 < 答案论文单词数下限 or \
                            len(论文领域向量l) != 1 or 论文领域向量l[0] not in 选择稿件的领域_出现次数表d or \
                            len(set(论文作者向量l) & 所有作者集合s) > 0 or \
                            论文年份 == 0:
                        continue
                    满足条件的论文数目 += 1
                    if 选择稿件的领域_出现次数表d[论文领域向量l[0]] == 0:
                        continue
                    选择稿件的领域_出现次数表d[论文领域向量l[0]] -= 1
                    稿件编号_文本_选择专家_年份表d[论文编号] = [文本, {作者: None for 作者 in 最优领域_涉及作者广义表d[论文领域向量l[0]]}, 论文年份]
        print('满足条件的论文数目:%d, 实际选择的论文数目:%d, 选择的论文领域:%s' %
              (满足条件的论文数目, len(稿件编号_文本_选择专家_年份表d), str(选择稿件的领域向量l)))
        return 稿件编号_文本_选择专家_年份表d

    @staticmethod
    def 用同领域论文_时间和专家领域数限制(作者_论文表, 领域_涉及作者8排名8出现次数广义表d, 论文_方向_年份_作者_引用论文_被引论文广义表, 论文编号_英文题目摘要地址,
                          年份范围l, 稿件摘要词数范围l, 稿件标准答案个数范围l, 专家至少拥有同领域论文个数, 需要稿件个数, 父类领域不取, 只取稿件的第一个领域):
        专家集合 = set(作者_论文表)
        稿件编号_文本_选择专家_年份表d = {}
        满足条件的论文个数 = 0
        平均_最多_最少稿件拥有专家数 = [0, 0, 1000000]

        with open(论文编号_英文题目摘要地址, 'r', encoding='utf-8') as 读取:
            for 一行 in 读取:
                一行 = 一行.strip().split('\t')
                if len(一行) < 3 or 一行[1] == 'None' or 一行[2] == 'None':
                    continue
                论文编号 = 一行[0]
                论文文本 = 一行[1] + ' ' + 一行[2]
                论文文本长度 = len(论文文本.split())
                if 论文文本长度 < 稿件摘要词数范围l[0] or 论文文本长度 > 稿件摘要词数范围l[1]:
                    continue
                论文作者d = 论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][2]
                if len(set(论文作者d) & 专家集合) > 0:
                    continue
                论文年份 = list(论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][1])
                if len(论文年份) > 0:
                    论文年份 = int(论文年份[0])
                else:
                    论文年份 = 0
                if 论文年份 < 年份范围l[0] or 论文年份 > 年份范围l[1]:
                    continue
                论文领域 = list(论文_方向_年份_作者_引用论文_被引论文广义表[论文编号][0])
                if 父类领域不取 and len(论文领域) > 0:
                    assert len(论文领域[0]) == 4, 'ASJC分类位数不等于4!'
                    _论文领域 = []
                    for 领域 in 论文领域:
                        if '00#' not in 领域 + '#':
                            _论文领域.append(领域)
                    论文领域 = _论文领域
                if len(论文领域) == 0:
                    continue
                if 只取稿件的第一个领域:
                    论文领域l = [论文领域[0]]
                else:
                    论文领域l = 论文领域
                论文标准答案l = []
                for 论文领域 in 论文领域l:
                    if 论文领域 not in 领域_涉及作者8排名8出现次数广义表d:
                        continue
                    for 专家编号, 排名, 领域论文出现次数 in 领域_涉及作者8排名8出现次数广义表d[论文领域]:
                        if 领域论文出现次数 >= 专家至少拥有同领域论文个数:
                            论文标准答案l.append(专家编号)
                if len(论文标准答案l) < 稿件标准答案个数范围l[0] or len(论文标准答案l) > 稿件标准答案个数范围l[1]:
                    continue
                标准答案专家d = {i: None for i in 论文标准答案l}
                满足条件的论文个数 += 1
                if len(稿件编号_文本_选择专家_年份表d) < 需要稿件个数:
                    稿件编号_文本_选择专家_年份表d[论文编号] = [论文文本, 标准答案专家d, 论文年份]

        for 稿件编号, 文本_选择专家_年份表l in 稿件编号_文本_选择专家_年份表d.items():
            平均_最多_最少稿件拥有专家数[0] += len(文本_选择专家_年份表l[1])
            if 平均_最多_最少稿件拥有专家数[1] < len(文本_选择专家_年份表l[1]):
                平均_最多_最少稿件拥有专家数[1] = len(文本_选择专家_年份表l[1])
            if 平均_最多_最少稿件拥有专家数[2] > len(文本_选择专家_年份表l[1]):
                平均_最多_最少稿件拥有专家数[2] = len(文本_选择专家_年份表l[1])
        平均_最多_最少稿件拥有专家数[0] /= len(稿件编号_文本_选择专家_年份表d)

        print('满足条件的论文个数:%d, 平均_最多_最少稿件拥有专家数:%s, 共获取%d篇稿件' %
              (满足条件的论文个数, str(平均_最多_最少稿件拥有专家数), len(稿件编号_文本_选择专家_年份表d)))
        return 稿件编号_文本_选择专家_年份表d

    @staticmethod
    def 转换原标准答案(文档集目录, 论文_方向_年份_作者_引用论文_被引论文广义表, groundturthName='文档-标准作者排名.txt'):
        稿件编号_文本_选择专家_年份表d = {}
        所有文件地址 = os.listdir(文档集目录)
        for 一个文件名 in 所有文件地址:
            if 一个文件名 == groundturthName:
                with open(文档集目录 + '/' + 一个文件名, 'r', encoding='utf-8') as r:
                    for line in r:
                        line = line.strip().split('\t')
                        if len(line) < 2:
                            continue
                        稿件编号 = os.path.splitext(line[0])[0]
                        if 稿件编号 not in 稿件编号_文本_选择专家_年份表d:
                            稿件编号_文本_选择专家_年份表d[稿件编号] = [None, {}, None]
                        for 审稿人编号 in line[1:]:
                            稿件编号_文本_选择专家_年份表d[稿件编号][1][审稿人编号] = None
                continue
            if 一个文件名[:2] == '._':
                continue
            稿件编号 = os.path.splitext(一个文件名)[0]
            if 稿件编号 not in 稿件编号_文本_选择专家_年份表d:
                稿件编号_文本_选择专家_年份表d[稿件编号] = [None, {}, None]
            with open(文档集目录 + '/' + 一个文件名, 'r', encoding='utf-8') as r:
                稿件编号_文本_选择专家_年份表d[稿件编号][0] = r.read().strip()
            论文年份 = list(论文_方向_年份_作者_引用论文_被引论文广义表[稿件编号][1])
            if len(论文年份) > 0:
                论文年份 = int(论文年份[0])
            else:
                论文年份 = 0
            稿件编号_文本_选择专家_年份表d[稿件编号][2] = 论文年份
        return 稿件编号_文本_选择专家_年份表d


def 输出标准答案(论文_文本_选择专家_年份表d, 文档集文件夹地址, 标准答案_作者编号向量地址, 删除文档集目录下所有文件):
    标准答案_作者编号向量 = []
    if 文档集文件夹地址 != '' and not os.path.exists(文档集文件夹地址):
        os.makedirs(文档集文件夹地址)
    if 删除文档集目录下所有文件:
        删除目录下所有文件(文档集文件夹地址)
    for 论文, 文本_选择专家_年份 in 论文_文本_选择专家_年份表d.items():
        文本 = 文本_选择专家_年份[0]
        专家编号l = [i for i in 文本_选择专家_年份[1].keys()]
        文件名 = 论文 + '.txt'
        with open(文档集文件夹地址 + '/' + 文件名, 'w', encoding='utf-8') as w:
            w.write(文本)
        标准答案_作者编号向量.append(文件名 + '\t' + '\t'.join(专家编号l))
    with open(标准答案_作者编号向量地址, 'w', encoding='utf-8') as w:
        w.write('\r\n'.join(标准答案_作者编号向量))


def 保存序列(字典或列表, 保存地址):
    二进制流 = pickle.dumps(字典或列表)
    with open(保存地址, 'wb') as w:
        w.write(二进制流)


ap = os.path.expanduser('~/code/data/1-RAP/')
旧数据文件夹地址 = ap + '输出文件目录-16/'
# 专家最多取论文年份=2015
# 选择专家数量=400000
# 需要稿件个数=100000
# 删除父类=False

# 论文编号_英文题目摘要地址=ap+'arxiv论文编号_英文题目摘要.txt'
论文_方向_年份_作者_引用论文_被引论文广义表 = 获取论文_方向_年份_作者_引用论文_被引论文广义表(
    ap + r'ab_arxiv_论文_方向_年份_作者_引用论文_被引论文广义表.pkl'
)  # {论文:[{方向:None,..},{年份:None,..},{作者:None,..},{引用论文:None,..},{引用作者:None,..},{被引论文:None,..},{被引作者:None,..}]}

print('------提取作者及其论文')
作者_论文表 = 提取作者及其论文(文件夹地址=旧数据文件夹地址 + 'a+作者编号_论文内容')
# 专家model_obj=专家model(论文_方向_年份_作者_引用论文_被引论文广义表,论文编号_英文题目摘要地址)
# 作者_论文表=随机生成筛选作者(专家model_obj).随机筛选并输出专家论文(
#             论文年份范围l=[0,专家最多取论文年份],论文领域白名单s=None,论文长度范围l=[100,1000],
#             最少论文数=50, 最多论文数=150,选择专家数量=选择专家数量,
#             专家论文输出文件夹路径=旧数据文件夹地址+'a+作者编号_论文内容',
#             删除原所有作者文件=True,
#             论文号_作者号广义表输出地址=旧数据文件夹地址+'a+论文号_作者号广义表.txt',
#             作者号_论文号广义表输出地址=旧数据文件夹地址+'a+作者号_论文号广义表.txt',
#             出色领域论文数下限=10,删除父类=删除父类)
# 专家model_obj.输出作者领域(旧数据文件夹地址+'e+专家领域.txt')

# print('------获取专家引用论文')
# 引用论文_专家表,引用论文_年份表d=获取专家引用论文(作者_论文表=作者_论文表,论文_方向_年份_作者_引用论文_被引论文广义表=论文_方向_年份_作者_引用论文_被引论文广义表)

print('------获得作者论文的年份')
作者_论文8年份广义表d = 获得作者论文的年份(论文_方向_年份_作者_引用论文_被引论文广义表=论文_方向_年份_作者_引用论文_被引论文广义表)

# print('------获取作者领域信息')
# 作者_领域广义表d,最优领域_涉及作者广义表d,领域_涉及作者8排名8出现次数广义表d,领域_涉及作者8比例广义表d=\
#     统计作者领域(作者_论文表,论文_方向_年份_作者_引用论文_被引论文广义表,领域比例下限=0.1)

print('------重构标准答案')
# 用引文信息重构
# 稿件编号_文本_选择专家_年份表d=重构标准答案.用专家引用论文(引用论文_专家表=引用论文_专家表,
#                                 引用论文_年份表d=引用论文_年份表d,
#                                最少专家数=10,
#                                最多专家数=10,
#                                答案论文单词数下限=100,
#                                标准答案数目上限=100,
#                                论文编号_英文题目摘要地址=论文编号_英文题目摘要地址)
# 用作者相关领域信息重构
# 稿件编号_文本_选择专家_年份表d=重构标准答案.用相同领域论文(作者_论文表d=作者_论文表,
#                                  最优领域_涉及作者广义表d=最优领域_涉及作者广义表d, # 要保证这个涉及作者按相关度排序了
#                                  论文_方向_年份_作者_引用论文_被引论文广义表=论文_方向_年份_作者_引用论文_被引论文广义表,
#                                  最少专家数=10,
#                                  最多专家数=10,
#                                  答案论文单词数下限=100,
#                                  标准答案数目上限=100, # 可能因为满足条件的论文足够多,但是特定领域的论文缺失导致最后答案不足上限
#                                  论文编号_英文题目摘要地址=论文编号_英文题目摘要地址)
# 用作者相关领域信息重构,包含对时间的限制和对专家领域的宽松限制
# 稿件编号_文本_选择专家_年份表d=重构标准答案.用同领域论文_时间和专家领域数限制(作者_论文表,领域_涉及作者8排名8出现次数广义表d,论文_方向_年份_作者_引用论文_被引论文广义表,
#                             论文编号_英文题目摘要地址=论文编号_英文题目摘要地址,
#                             年份范围l=[专家最多取论文年份+1,3000],
#                             稿件摘要词数范围l=[150,1000],
#                             稿件标准答案个数范围l=[20,100],
#                             专家至少拥有同领域论文个数=10,
#                             需要稿件个数=需要稿件个数,
#                             父类领域不取=删除父类,
#                             只取稿件的第一个领域=False)
稿件编号_文本_选择专家_年份表d = 重构标准答案.转换原标准答案(文档集目录=旧数据文件夹地址 + 'a+文档集',
                                   论文_方向_年份_作者_引用论文_被引论文广义表=论文_方向_年份_作者_引用论文_被引论文广义表,
                                   groundturthName='文档-标准作者排名.txt')

# print('------输出标准答案')
# 输出标准答案(论文_文本_选择专家_年份表d=稿件编号_文本_选择专家_年份表d,
#        文档集文件夹地址=旧数据文件夹地址+'a+文档集',
#        标准答案_作者编号向量地址=旧数据文件夹地址+'a+文档集/文档-标准作者排名.txt',
#        删除文档集目录下所有文件=True)

print('------输出 作者_论文8年份广义表d、稿件编号_文本_选择专家_年份表d')
保存序列(作者_论文8年份广义表d, 旧数据文件夹地址 + 'e+作者_论文8年份广义表d.pkl')
保存序列(稿件编号_文本_选择专家_年份表d, 旧数据文件夹地址 + 'e+稿件编号_文本_选择专家_年份表d.pkl')
