import os
import copy


def 处理4(tassign文件地址, 作者索引_作者号表地址, 作者号_论文号广义表,
        主题数, alpha, 文档分割标识号=0, 默认输出=True):  # 获得文档_主题分布和词的统计
    文档_主题分布 = []
    文档_主题_次数矩阵 = []
    文档号_词_词数广义表 = []
    作者号_词_词数广义表 = []
    平均文档长度 = 0

    作者号表 = []  # 索引就是列表编号的顺序了
    with open(作者索引_作者号表地址) as 读取:
        for 一行 in 读取:
            作者号表.append(一行[:-1].split('\t')[1])
    作者号_论文号字典 = {}
    with open(作者号_论文号广义表) as 读取:
        for 一行 in 读取:
            一行 = 一行.strip().split('\t')
            作者号_论文号字典.update([(一行[0], 一行[1:])])

    第几作者_索引 = 0
    论文号字典 = {}
    文档总数 = 0
    词总数 = 0
    读取 = open(tassign文件地址)
    for 一行 in 读取:
        一行 = 一行.strip().split('\t')  # 这里去掉一行末尾的'\t'
        一行 = [i.split(':') for i in 一行]
        一个作者词号_主题表 = [[int(i[0]), int(i[1])] for i in 一行]
        作者号 = 作者号表[第几作者_索引]
        作者号_词_词数广义表.append([作者号, {}])
        第几文档 = -1
        不重复文档 = False
        for 一个词号_主题 in 一个作者词号_主题表:
            if 一个词号_主题[0] == 文档分割标识号:  # 说明是文档分割标识号 {fenge}
                第几文档 += 1
                文档总数 += 1
                try:
                    文档号 = 作者号_论文号字典[作者号][第几文档]
                except:
                    print(文档号)
                    print(作者号)
                    print(第几文档)
                    print(作者号_论文号字典[作者号])
                    raise
                if 文档号 not in 论文号字典:  # 不重复文档
                    论文号字典.update([(文档号, None)])
                    不重复文档 = True
                    文档号_词_词数广义表.append([文档号, {}])
                    文档_主题分布.append([0] * 主题数)
                else:
                    不重复文档 = False
            if 不重复文档:
                词总数 += 1
                文档_主题分布[-1][一个词号_主题[1]] += 1
                if 一个词号_主题[0] in 文档号_词_词数广义表[-1][1]:
                    文档号_词_词数广义表[-1][1][一个词号_主题[0]] += 1
                else:
                    文档号_词_词数广义表[-1][1].update([(一个词号_主题[0], 1)])
            if 一个词号_主题[0] in 作者号_词_词数广义表[-1][1]:
                作者号_词_词数广义表[-1][1][一个词号_主题[0]] += 1
            else:
                作者号_词_词数广义表[-1][1].update([(一个词号_主题[0], 1)])
        第几作者_索引 += 1
    读取.close()

    for i in range(len(文档号_词_词数广义表)):
        文档号_词_词数广义表[i][1] = sorted(文档号_词_词数广义表[i][1].items(), key=lambda t: t[0], reverse=False)
    for i in range(len(作者号_词_词数广义表)):
        作者号_词_词数广义表[i][1] = sorted(作者号_词_词数广义表[i][1].items(), key=lambda t: t[0], reverse=False)

    文档_主题_次数矩阵 = copy.deepcopy(文档_主题分布)
    for 一个文档_主题分布 in 文档_主题分布:
        总主题数 = 0
        for 单主题数 in 一个文档_主题分布:
            总主题数 += 单主题数
        for i in range(len(一个文档_主题分布)):
            一个文档_主题分布[i] = (一个文档_主题分布[i] + alpha) / (总主题数 + alpha * 主题数)

    if 默认输出:
        with open(输出文件目录 + '4-文档_主题_次数矩阵.txt', 'w') as 写入:
            for i in 文档_主题_次数矩阵:
                for j in i:
                    写入.write(str(j) + '\t')
                写入.write('\r\n')
        with open(输出文件目录 + '4-文档_主题分布.txt', 'w') as 写入文档_主题分布:
            for i in 文档_主题分布:
                for j in i:
                    写入文档_主题分布.write(str(j) + '\t')
                写入文档_主题分布.write('\r\n')
        with open(输出文件目录 + '4-文档号_词_词数广义表.txt', 'w') as 写入:
            for 文档号_词_词数 in 文档号_词_词数广义表:
                写入.write(str(文档号_词_词数[0]) + '\t')
                for 词, 词数 in 文档号_词_词数[1]:
                    写入.write(str(词) + ':' + str(词数) + '\t')
                写入.write('\r\n')
        with open(输出文件目录 + '4-作者号_词_词数广义表.txt', 'w') as 写入:
            for 作者号_词_词数 in 作者号_词_词数广义表:
                写入.write(作者号_词_词数[0] + '\t')
                for 词, 词数 in 作者号_词_词数[1]:
                    写入.write(str(词) + ':' + str(词数) + '\t')
                写入.write('\r\n')
        print('文档总数:%d, 不重复文档数:%d, 作者总数:%d, 平均文档长度:%lf' %
              (文档总数, len(文档号_词_词数广义表), 第几作者_索引, 词总数 / len(文档号_词_词数广义表)))
    return 文档_主题_次数矩阵, 文档_主题分布, 文档号_词_词数广义表, 作者号_词_词数广义表


ap = os.path.expanduser('~')
输出文件目录 = ap + '/code/data/1-RAP/输出文件目录-16/'

tassign文件地址 = 输出文件目录 + '3-tassign文件.txt'
作者索引_作者号表地址 = 输出文件目录 + '3-文档编号_文档名表.txt'
主题数 = 50
alpha = 0.5
作者号_论文号广义表地址 = 输出文件目录 + 'a+作者号_论文号广义表.txt'
论文号_作者号广义表地址 = 输出文件目录 + 'a+论文号_作者号广义表.txt'

文档_主题_次数矩阵, 文档_主题分布, 文档号_词_词数广义表, 作者号_词_词数广义表 = 处理4(tassign文件地址
                                                    , 作者索引_作者号表地址, 作者号_论文号广义表地址,
                                                    主题数, alpha)
